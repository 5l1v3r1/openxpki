#!/usr/bin/perl
#
# Written by Martin Bartosch for the OpenXPKI project 2006
# Copyright (c) 2006 by The OpenXPKI Project
# $Revision: 589 $
#

use warnings;
use strict;
use English;

use Data::Dumper;

use Pod::Usage;
use Getopt::Long;
use POSIX;
use File::Spec;
use Config::Std;
use Cwd;

# use Smart::Comments;

my %params;
my %config;


my $svn = 'svn';

my $svn_info;
my $mapping_of;
my $format_of;


###########################################################################

sub slurp {
    my $filename = shift;

    return unless (defined $filename && -r $filename);

    my $result = do {
	open my $HANDLE, '<', $filename or return;
	if (! $HANDLE) {
	    die "Could not open file '$filename' for reading. Stopped";
	}
	# slurp mode
	local $INPUT_RECORD_SEPARATOR;     # long version of $/
	<$HANDLE>;
    };
    return $result;
}

sub get_svn_info {
    my $result;
    open my $fh, "$svn info -R |" or die "Could not run 'svn' command. Stopped";
  SVN_INFO:
    while (<$fh>) {
	chomp;
	if (m{ \A Revision: \s* (\d+) }xms) {
	    $result->{revision} = $1;
	    next SVN_INFO;
	}
	if (m{ \A Last\ Changed\ Rev: \s* (\d+) }xms) {
	    if (! exists $result->{'last-changed-revision'} ||
		($1 > $result->{'last-changed-revision'})) {
		$result->{'last-changed-revision'} = $1;
	    }
	}
    }
    close $fh;
    
    return $result;
}


sub upwards_find_file {
    my $filename = shift;
    
    return undef unless defined $filename;

    my $dir = getcwd;

  DIRECTORY:
    while ($dir ne '/') {
	if (exists $params{verbose}) {
	    print STDERR "* scanning $dir for $filename\n";
	}

	my $absolute_filename = File::Spec->catfile($dir, $filename);
	if (-e $absolute_filename) {
	    if (exists $params{verbose}) {
		print STDERR "* found $absolute_filename\n";
	    }
	    return $absolute_filename;
	}

	# one level up
	my @dirs = File::Spec->splitdir($dir);
	pop @dirs;
	$dir = File::Spec->catdir(@dirs);
    }
    return;
}

sub expand_keyword {
    my $arg = shift;

    my $last_arg = "";
    while ($last_arg ne $arg) {
        $last_arg = $arg;
	foreach my $keyword (keys %{$mapping_of->{keyword}}) {
	    my $value = $mapping_of->{keyword}->{$keyword}->{entry}->{value};
	    $arg =~ s{ $keyword }{$value}xmsg;
	}
	$arg = strftime($arg, gmtime(time));
    }

    return $arg;
}

###########################################################################

GetOptions(\%params,
	   qw(
	      help|?
	      man
              verbose
              format=s
              dump
              dumpformat=s
	      )) or pod2usage(-verbose => 0);

pod2usage(-exitstatus => 0, -verbose => 2) if $params{man};
pod2usage(-verbose => 1) if ($params{help});

my $def_file = upwards_find_file('.VERSION_DEFINITION');

if (! defined $def_file) {
    die "Could not find version definition file anywhere. Stopped";
}
read_config($def_file, %config);

if (exists $config{FORMAT_DEFINITIONS}) {
    $format_of = $config{FORMAT_DEFINITIONS};
    delete $config{FORMAT_DEFINITIONS};
}

### %config
### $format_of

COMPONENT:
foreach my $component (keys %config) {
    ### $component...

    # coerce keyword into arrayref
    if (defined $config{$component}->{keyword}) {
	if (ref $config{$component}->{keyword} eq '') {
	    $config{$component}->{keyword} = [ $config{$component}->{keyword} ];
	}
    } else {
        die "No keyword defined for component $component. Stopped";
    }
    
    # built-in components
    if ($component =~ m{ \A (?:revision|last-changed-revision) \z }xms) {
        $svn_info ||= get_svn_info();

        $mapping_of->{component}->{$component} = {
            keyword => $config{$component}->{keyword},
            value   => $svn_info->{$component},
            type    => 'built-in',
        };
        next COMPONENT;
    }

    my $optional = (defined $config{$component}{optional} 
                    && ($config{$component}{optional} =~ m{ \A (?:yes|true|1) \z }ixms));
    ### $optional

    if (! defined $config{$component}{filename}) {
        die "No 'filename' defined for component '$component'. Stopped";
    }

    my $file = upwards_find_file($config{$component}{filename});
    my $content = '';

    if (defined $file) {
        $content = slurp($file);
        if (! defined $content) {
            $content = '';
        }
        chomp $content;
    } else {
        if (! $optional) {
            die "Could not find version file '$config{$component}{filename}' for component '$component' upwards from here. Stopped";
        }
        $content = '';
    }

    $mapping_of->{component}->{$component} = {
        keyword => $config{$component}->{keyword},
        value   => $content,
        type    => 'component',
    }
}

# remap entries
foreach my $component (keys %{$mapping_of->{component}}) {
    ### $component
    my $entry = $mapping_of->{component}->{$component};
    foreach my $keyword (@{ $mapping_of->{component}->{$component}->{keyword} }) {
        $mapping_of->{keyword}->{$keyword}->{component} = $component,
        $mapping_of->{keyword}->{$keyword}->{entry} = $entry,
    }
}

### $mapping_of

if (defined $params{format}) {
    my $format = $params{format};

    if (exists $format_of->{$format}) {
        $format = $format_of->{$format};
    }
    my $value = expand_keyword($format);

    eval "printf('%s', qq($value));";
}

if (defined $params{'dump'}) {
    foreach my $component (keys %{$mapping_of->{component}}) {
        my $dumpformat = 'KEYWORD=VALUE\n';
        if (defined $params{dumpformat}) {
            $dumpformat = $params{dumpformat};
        }

        my $keyword = $mapping_of->{component}->{$component}->{keyword}->[0];
        my $value   = expand_keyword($mapping_of->{keyword}->{$keyword}->{entry}->{value});
        my %vars = (
            KEYWORD => $keyword,
            VALUE   => $value,
        );

        my @values = ();

       MAKEFORMAT:
        while (1) {
            my ($item) = ($dumpformat =~ m{ (KEYWORD|VALUE) }xms);
            last MAKEFORMAT if (! defined $item);
            $dumpformat =~ s{ $item }{%s}xms;
            push @values, $vars{$item};
        }
        ### $dumpformat
        ### @values

        eval "printf(qq($dumpformat), \@values);";
    }
}

exit 0;

__END__

=head1 NAME

vergen - Version management tool

=head1 USAGE

vergen [options] COMMAND

 Options:
   --help                brief help message
   --man                 full documentation
   --format <arg>        print version using format 'arg'
   --dump                dump keyword assignments
   --dumpformat <string> use <string> as dump format 
                         (default: KEYWORD=VALUE\n)
   --verbose             show details about information obtained

=head1 DESCRIPTION

B<vergen> is a tool that can help to maintain consistent version numbers
in a project. If desired it uses Subversion to determine revision number
information.
Starting from the current directory, vergen searches upwards for its
configuration file '.VERSION_DEFINITION' and reads the first file found
(see B<The .VERSION_DEFINITION File> for a detailed description.)
After the configuration file has been read, vergen again traverses the
directory tree upwards from the current directory and searches for all
file names defined in the version definition file. Once a file is found,
its content is read and stored as the value for the corresponding component.
Finally, if Subversion references are contained in the configuration file,
vergen calls 'svn info -R' in the current directory and determines certain
information about the checked-out subversion project.
All this information is available as a symbolic name for the composition
of version numbers. It is possible to print the composed version number
using the --format option


=head1 OPTIONS

=over 8

=item B<--format> arg

Print format string, using the version numbers obtained by vergen. The
output format is determined by 'arg' and may either be a symbolic name
referencing a format string in the FORMAT_DEFINITIONS section of
the corresponding .VERSION_DEFINITION file or a custom string specifying
the version number. You may use all keywords defined in .VERSION_DEFINITON
and all conversion specifications as defined by strftime(3).

=item B<--dump>

Dump all keyword definitions in a format that can be sources by sh.

=item B<--dumpformat> string

Use specified string as template for keyword dump. Defaults to
'KEYWORD=VALUE\n'.
Useful dump formats:

  --dumpformat 'KEYWORD="VALUE"\n'   
  --dumpformat 'export KEYWORD="VALUE"\n'   

=item B<--verbose>

Show which files are processed for determination of the version number
components.

=back

=head1 The .VERSION_DEFINITION File

The version definition file contains format and version number component
definitions. It is split in a number of sections that define the composition
of version numbers.

=head2 Format definition

The format definition section is started by the [FORMAT_DEFINITIONS] tag.

Example:
  [FORMAT_DEFINITIONS]
  simple: MAJOR.MINOR
  advanced: MAJOR.MINOR.RELEASE

This configuration defines two named formats called 'simple' and 'advanced'
that can be used with the --format option. The value following the colon
is used as the output format in this case.

=head2 Custom component definitions

Section names are interpreted as a custom version component
definition.
In order to create a custom version number component you should define 
the following keys:

=head3 filename

File name to use. vergen searches upwards from the current directory 
until it finds the specified file.
The file contents will be assigned as the component value.

=head3 keyword

Symbolic name(s) describing the version component that can be used 
to reference its value. More than one keyword can be used for 
aliasing the component. Each of these keyword can be used to reference
the component value. It is possible to use the keyword in a format (--format)
or even in the contents of the version component files. The program resolves
recursive references to keywords properly.

Only the first keyword defined is used for --dump.

=head3 optional

If set to 'yes' or 'true', this component is not mandatory.

=head2 Subversion built-ins

The following named sections are hardcoded
and can be used to access Subversion information.

=head3 revision 

'revision' expands to the global SVN revision number

=head3 last-changed-revision

'last-changed-revision' determines the highest "Last Changed Rev" 
below the current directory (recursively).


=head1 Examples

=head2 .VERSION_DEFINITION

  # Format definitions
  [FORMAT_DEFINITIONS]
  version: MAJOR.MINOR.RELEASESUFFIX\n
  daily_snapshot: %F-MAJOR.MINOR.RELEASESUFFIX\n

  # Built-in components
  [revision]
  keyword:          SVN_REVISION

  [last-changed-revision]
  keyword:          SVN_LAST_CHANGED_REVISION

  # Custom components
  [major]
  filename:         .VERSION_MAJOR
  keyword:          MAJOR

  [minor]
  filename:         .VERSION_MINOR
  keyword:          MINOR

  [release]
  filename:         .VERSION_RELEASE
  keyword:          RELEASE

  [suffix]
  filename:         .VERSION_SUFFIX
  keyword:          SUFFIX
  optional:         yes


=head2 Invocation

Using the above configuration file:

  vergen --format daily_snapshot
  vergen --format MAJOR.MINOR
  vergen --dump
