<%args>
    $__session_id => undef
</%args>
<%init>
  $m->comp ('/lib/debug.mhtml',
            level => 1,
            msg   => "try to get session\n");

  $m->comp ('/lib/debug.mhtml',
            level => 2,
            msg   => "__session_id::=".$__session_id."\n".
                     "context->session_id::=".$context->{session_id});

  # check if we are using an already existing and session and if there
  # has been established a client connection for it.
  if (exists $context->{session_id} and
      exists $context->{client})
  {
      # this session has already been established and is in the context
      # we ignore the context if the client connection is down
      return $session_cache{$context->{session_id}};
  }

  # FIXME: don't use environment but rather a proper configuration
  my $socketfile = $ENV{OPENXPKI_SOCKET_FILE};
  my $client = OpenXPKI::Client::HTML::Mason->new(
      {
          SOCKETFILE => $socketfile,
      });

  if (not defined $__session_id)
  {
      ## try to get session_id directly from the form data
      my %request = $m->request_args();
      $__session_id = $request{'__session_id'} if (exists $request{'__session_id'});
  }
  
  my %args;
  if (defined $__session_id) {
      # this may happen after a restart: the client still knows its session
      # ID, but we were restarted and the session cache is empty.
      # try to recreate the session based on the given session_id.
      $args{SESSION_ID} = $__session_id;
  }
  $client->init_session(\%args);
  $__session_id = $client->get_session_id();
  $session_cache{$__session_id}->{client} = $client;
  $session_cache{$__session_id}->{session_id} = $__session_id;
  $context = $session_cache{$__session_id};

  $m->comp ('/lib/debug.mhtml',
            'level' => 1,
            'msg'   => 'finished with session_id '.$context->{session_id});
  ## the next message is get_pki_realm, get_auth_stack, login or service_ready
</%init>
