<?xml version='1.0' encoding='UTF-8'?>
<sect1 id="qs_installation">
  <title>Installation</title>

<!-- TODO - openssl installation? -->
  <sect2 id="compilation">
    <title>Compilation and Module installation</title>
    <para>Assuming you've gotten a source tree from somewhere (i.e. either an official release tar-ball or a Subversion checkout), enter the <filename class="directory">trunk/perl-modules/core/trunk</filename> directory. Run <command>perl Makefile.PL</command> to create a Makefile. If this should fail, please make sure that you have installed all required Perl modules. If you don't, you can install them using either software packages from your distribution or by using the CPAN shell. If it works, you can compile &openxpki; using <command>make</command>. Once that is taken care of, make sure to run <command>make test</command> to see if the compiled &openxpki; runs correctly. <command>make install</command> completes the installation of the Perl modules. Note that if you want to install &openxpki; locally, i.e. into your home directory, you can run <command>perl Makefile.PL PREFIX=<replaceable>directory</replaceable></command> in the first step to prepare for an installation below <replaceable>directory</replaceable>.
    </para>
    <para>Now you have all the required modules for the server installed. As the administrative tools use code of the &openxpki; client as well, you need to install the corresponding modules, too. They come in handy later on when you want to set up a client (such as the Mason-based web interface) as well. Change to the <filename class="directory">trunk/clients/perl/OpenXPKI-Client</filename> directory and repeat the same steps as above, again using <command>perl Makefile.PL PREFIX=<replaceable>directory</replaceable></command> if necessary.
   </para>
  </sect2>

  <sect2 id="qs_installation_initial">
    <title>Initial (pre-deployment) configuration</title>
    <para>Before being able to run the server, the administrative tools and the (base) configuration have to be deployed. To install them, change into the <filename class="directory">trunk/deployment</filename> directory. Run <command>./configure</command>, or (if you want to install into a local directory) <command>./configure --prefix <replaceable>directory</replaceable></command>. Then, run <command>make</command> and <command>make install</command> to install the tools.</para>
<!-- adding openxpki user -->
  </sect2>

  <sect2 id="qs_installation_deployment">
    <title>Deployment</title>
    <para>To install the meta configuration file (<filename>openxpki.conf</filename>), run <command>openxpkiadm deploy --template quickstart</command>. Follow the instructions and run <command>openxpki-configure</command>. This is an interactive tool that allows you to specify some of the basic configuration options. The most important options that you need to set right now are the location of your openssl binary (defaults to <filename>/usr/bin/openssl</filename>) and your database configuration. Exit the tool and allow it to write the modified configuration. Depending on the deployment style, you now have one huge <filename>config.xml</filename> or a number of smaller XML files in your <filename class="directory">etc/openxpki</filename> directory. These are the files that are actually used by the OpenXPKI server and which you can modify later to set up your desired behaviour. After having set up a database using your favourite tool for your favourite DBMS, you should run <command>openxpkiadm initdb</command> to set up the database schema. If everything goes right, try to start the &openxpki; server using <command>openxpkictl start</command>. If you see <quote>DONE.</quote> in the last line of output, this works and the &openxpki; server is up and running. Stop it for now using <command>openxpkictl stop</command>. If it goes wrong, please check your <envar>PERL5LIB</envar> environment variable. This variable needs to include the location where your Perl modules where installed (which depends on your <envar>PREFIX</envar> setting).</para>
  </sect2>
<!-- TODO - i18n installation -->
  <sect2 id="qs_installation_webinterface">
    <title>Setting up the web interface</title>
    <para>So now you've got a working server, but of course you can not see very much of it, which is why the installation of the web interface will be the next step. Change into the <filename class="directory">trunk/clients/perl/OpenXPKI-Client-HTML-Mason</filename> directory and run <command>perl Makefile.PL</command> (again adding the PREFIX option if necessary), <command>make</command> and <command>make install</command>. This installs the needed client modules. In the next step, copy the <filename class="directory">htdocs</filename> directory to a path of your liking that is readable by your webserver. We will refer to this directory as the (Mason) component root later on.</para>
    <para>For the rest of this section, we assume you are using Apache as your webserver. Installation under different webservers is possible, but you are largely on your own here. There are two different options how to install the &openxpki; Mason client &ndash; either using mod_perl or using CGI. If you have mod_perl available, go for it, as it is much faster than using CGI. CGI is not recommend for production use, but to quickly try out &openxpki;, it works.</para>
    <sect3 id="qs_installation_webinterface_mod_perl">
      <title>Installing using mod_perl</title>
      <para>Use the <filename>eg/openxpki-mason-mod_perl.conf</filename> file as a boilerplate for your Apache configuration. You need to change four variables defined in this file. The first one is the <envar>MasonDataDir</envar> variable, which should point to a directory that is writable by your webserver user. This is a directory where Mason temporarily caches its components. The second one is the <envar>MasonCompRoot</envar> variable, which should point to the component root that you chose earlier. Furthermore, you need to set up <envar>OPENXPKI_SOCKET_FILE</envar> to point to your &openxpki; socket file. Note that this file needs to be readable and writable by both your &openxpki; user as well as the webserver user &ndash; the easiest way to achieve this is putting them in a common group. You can look up the location of the socket file in your <filename>config.xml</filename>. The last variable is <envar>OPENXPKI_LOCALE_PREFIX</envar>, which needs to point to your <filename class="directory">locale</filename> directory if you have installed it in a non-standard path.</para>
    </sect3>
  </sect2>

  <sect2 id="qs_installation_ca_certificate">
    <title>Setting up the CA certificate and key</title>
    <para></para>
  </sect2>
</sect1>
